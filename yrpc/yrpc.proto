syntax = "proto3";
package yrpc;

option optimize_for = LITE_RUNTIME;

//系统中所有的消息交互底层都以此为包装,这是yrpc中的最小交互数据包
message Ypacket {

  //整个yrpc packet的长度，不包含此字段
  //虽然这个长度可以很长，但是为了避免大包阻塞其它操作，通常都要限制长度,采用分包多发机制
  //当使用基于包的传输通道时(udp/kcp/websocket)，此值可能为0(此时长度为收到的整个包的长度)
  //当填写了值时,为proto编码的长度-5
  fixed32 len = 1;

  // rpc command,rpc的命令和option
  // b15-b0(uint16):为rpc命令
  // b17-b16:body压缩方式 0:无压缩 1:lz4 2:zlib inflate/deflate
  // b19-b18:optbin压缩方式 0:无压缩 1:lz4 2:zlib inflate/deflate
  // b31-b20: not used yet
  fixed32 cmd = 2;

  //rpc call id,给分辨不同的rpc调用使用,调用方增1循环使用
  uint32 cid=3;

  // rpc no,从0开始增1使用,用于区分收到重复的包,特别是udp的情况下
  // 每一个rpc 流式调用有其自己的序号流,从0开始
  uint32 no = 4;

  // response code
  sint32 res = 5;

  // packet body
  bytes body = 10;

  // optional str parameter,额外的信息,一般不会有,有些特殊命令里面可能用到
  string optstr = 11;

  // optional binary parameter,额外的信息,一般不会有,有些特殊命令里面可能用到
  bytes optbin = 12;
  
  //optional meta info,key=meta[i],value=meta[i+1]
  repeated string meta=13;
  
};

// A generic empty message that you can re-use to avoid defining duplicated
// empty messages in your APIs. A typical example is to use it as the request
// or the response type of an API method. For instance:
//
//     service Foo {
//       rpc Bar(parameter) returns (yrpc.Yempty);
//     }
//

message Yempty {

}

// A generic nocare message that you can use to info the call is not important and no care the result. 
// A typical example is to use it in report log/trace. For instance:
//
//     service Log {
//       rpc Log(infos) returns (yrpc.Ynocare);
//     }
//
message Ynocare {

}

message UnixTime {
  // Unix time, the number of miliseconds elapsed since January 1, 1970 UTC
  sint64 time_unix = 1;
  //utc time yyyy-MM-dd hh:mm:ss.zzz
  string time_str = 2;
}

